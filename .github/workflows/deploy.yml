name: Deployments

on:
  push:
    branches: [ main ]
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:

jobs:
  ci:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run lint
        run: npm run lint

      - name: Check types
        run: npm run check-types

      - name: Run security audit
        run: npm audit --audit-level=high --production

      - name: Run unit tests
        run: npm test -- --passWithNoTests --coverage --testPathPattern=tests/unit

      - name: Run integration tests
        run: npm test -- --passWithNoTests --testPathPattern=tests/integration

      - name: Build
        run: npm run build

      - name: Test bundle size
        run: |
          # Check that bundle size is reasonable (< 5MB)
          if [ -f "dist/src/index.js" ]; then
            BUNDLE_SIZE=$(stat -c%s "dist/src/index.js" 2>/dev/null || echo "0")
            echo "Bundle size: ${BUNDLE_SIZE} bytes"
            if [ "$BUNDLE_SIZE" -gt 5242880 ]; then
              echo "‚ùå Bundle too large: ${BUNDLE_SIZE} bytes (limit: 5MB)"
              exit 1
            else
              echo "‚úÖ Bundle size acceptable: ${BUNDLE_SIZE} bytes"
            fi
          fi

      - name: Run quick smoke tests
        run: |
          # Quick smoke test to make sure basic imports work
          NODE_ENV=production node -e "
            try {
              require('./dist/src/index.js');
              console.log('‚úÖ Build successful - basic imports work');
              process.exit(0);
            } catch (error) {
              console.error('‚ùå Build failed - import error:', error.message);
              process.exit(1);
            }
          "

      - name: Code Quality Gate
        run: |
          # Check for TODO/FIXME comments in critical files
          TODO_COUNT=$(find src -name "*.ts" -exec grep -l "TODO\|FIXME\|HACK\|XXX" {} \; | wc -l)
          if [ "$TODO_COUNT" -gt 5 ]; then
            echo "‚ö†Ô∏è Warning: $TODO_COUNT files with TODO/FIXME comments found"
          fi

          # Check for any remaining 'any' types in critical files
          ANY_COUNT=$(grep -r ":\s*any" src/ --include="*.ts" | grep -v node_modules | wc -l)
          if [ "$ANY_COUNT" -gt 10 ]; then
            echo "‚ö†Ô∏è Warning: $ANY_COUNT instances of 'any' type found"
          fi

          echo "‚úÖ Code quality gate passed"

  # Production deployments for main branch
  deploy-fly:
    if: github.ref == 'refs/heads/main'
    needs: ci
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: flyctl deploy -c fly.toml --wait-timeout 300
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  deploy-vercel:
    if: github.ref == 'refs/heads/main'
    needs: ci
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Vercel Deployment Skipped
        run: |
          echo "‚úÖ Vercel deployment skipped - already handled by Vercel GitHub Integration"
          echo "üöÄ View live deployment at: https://open-hivemind.vercel.app"

  deploy-netlify:
    if: github.ref == 'refs/heads/main'
    needs: ci
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Netlify Deployment Skipped (Requires Configuration)
        run: |
          echo "‚ö†Ô∏è Netlify deployment skipped - requires NETLIFY_AUTH_TOKEN and NETLIFY_SITE_ID secrets"
          echo "üìù To enable: Add secrets to GitHub repository settings"