name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run lint
        run: npm run lint

      - name: Check types
        run: npm run check-types

      - name: Build
        run: npm run build

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Update README badge
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          # Extract passing tests (adapt from existing)
          PASSING_TESTS=$(npm test -- --silent | grep -oP '\d+(?= passed)' || echo 0)
          sed -i "s/Total Tests: [0-9,]\+ passing tests/Total Tests: $PASSING_TESTS passing tests/" README.md
          sed -i "s/badge\/tests-[0-9]\+%20passing/badge\/tests-$PASSING_TESTS%20passing/" README.md

      - name: Commit README update
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git diff --quiet && git diff --staged --quiet || (git commit -m "Update test count badge: $PASSING_TESTS passing tests" && git push)

  deploy:
    runs-on: ubuntu-latest
    needs: ci
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_IO_USERNAME }}
          password: ${{ secrets.DOCKER_IO_AUTH }}

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push full Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_IO_USERNAME }}/open-hivemind:${{ github.sha }}
            ${{ secrets.DOCKER_IO_USERNAME }}/open-hivemind:latest
          platforms: linux/amd64,linux/arm64
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            INCLUDE_PYTHON_TOOLS=true
            INCLUDE_NODE_TOOLS=true
            INCLUDE_FFMPEG=true

      - name: Build and push slim Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_IO_USERNAME }}/open-hivemind:${{ github.sha }}-slim
            ${{ secrets.DOCKER_IO_USERNAME }}/open-hivemind:slim
          platforms: linux/amd64,linux/arm64
          cache-from: type=local,src=/tmp/.buildx-cache
          build-args: |
            INCLUDE_PYTHON_TOOLS=false
            INCLUDE_NODE_TOOLS=false
            INCLUDE_FFMPEG=false

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Deploy to Fly.io
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy app
        run: flyctl deploy -c fly.toml --wait-timeout 300
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}